# ~/.tmux.conf — KORA Matrix v3: Solo Leveling Edition
# Responsabilidade: Configurar o multiplexador de terminal Tmux.
# Princípio: Coerência visual, produtividade.

# --- Configuração Core ---
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",*:Tc,*:RGB"
set -g default-shell $SHELL

# Prefixo (Ctrl+A)
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Otimização de Performance
set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on
set -g history-limit 50000
set -sg escape-time 0
set -g mouse on
setw -g mode-keys vi # Modo de cópia estilo Vi
set -g focus-events on
set -g detach-on-destroy off
set -g display-time 2000

# --- Cores (Paleta Solo Leveling) ---
# Cores base
neural_void="#0d0d1a"
neural_surface="#1c1c2e"
neural_text="#c0c0ff"
neural_muted="#6a5acd"

# Cores de destaque
neural_primary="#A020F0"
neural_cyan="#00FFFF"
neural_magenta="#FF00FF"
neural_green="#00FF7F"
neural_yellow="#FF00FF"
neural_red="#FF00FF"

# --- Status Bar Neural (Contínua) ---
set -g status-interval 1
set -g status-position top
set -g status-justify left
set -g status-style "bg=$neural_void,fg=$neural_text"
set -g status-left-length 200
set -g status-right-length 200

# Separadores (estilo Powerline)
separator_left="#[fg=$neural_primary,bg=$neural_void,nobold]"
separator_right="#[fg=$neural_primary,bg=$neural_void,nobold]"

# Lado Esquerdo
status_left_1="#[fg=$neural_void,bg=$neural_primary,bold] 󰣇 #S "
status_left_2="#[fg=$neural_text,bg=$neural_surface] #{?session_many_attached,󰀠 LINKED,󰘔 SOLO} "
set -g status-left "$status_left_1$separator_left$status_left_2#[fg=$neural_surface,bg=$neural_void]"

# Lado Direito
# Chama a função spell_vitals (definida em spellbook.zsh) para informações dinâmicas
status_right_1="#[fg=$neural_surface,bg=$neural_void]#[bg=$neural_surface,fg=$neural_text] #(spell_vitals) "
status_right_2="#[fg=$neural_primary,bg=$neural_surface]#[bg=$neural_primary,fg=$neural_void,bold] 󰥔 %H:%M "
set -g status-right "$status_right_1$status_right_2"

# Janelas
set -g window-status-current-format "#[fg=$neural_void,bg=$neural_yellow]#[fg=$neural_void,bg=$neural_yellow,bold] #I 󰖲 #W #[fg=$neural_yellow,bg=$neural_void,nobold]"
set -g window-status-format "#[fg=$neural_text,bg=$neural_void] #I 󰖲 #W "
set -g window-status-separator ""

# --- Painéis ---
set -g pane-border-style "fg=$neural_muted"
set -g pane-active-border-style "fg=$neural_primary,bold"
set -g pane-border-lines heavy
set -g display-panes-time 3000
set -g display-panes-colour "$neural_primary"
set -g display-panes-active-colour "$neural_cyan"

# --- Mensagens ---
set -g message-style "fg=$neural_void,bg=$neural_primary,bold"
set -g message-command-style "fg=$neural_void,bg=$neural_cyan,bold"
set -g mode-style "fg=$neural_void,bg=$neural_primary,bold"
set -g copy-mode-match-style "fg=$neural_void,bg=$neural_yellow,bold"
set -g copy-mode-current-match-style "fg=$neural_void,bg=$neural_green,bold"

# --- Gerenciamento de Janelas e Painéis ---
# Criação com paths neurais
bind c new-window -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Navegação neural (Vim-style)
bind h select-pane -L
bind j select-pane -D  
bind k select-pane -U
bind l select-pane -R

# Redimensionamento neural com precisão
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Ajustes micro
bind -r M-h resize-pane -L 1
bind -r M-j resize-pane -D 1
bind -r M-k resize-pane -U 1
bind -r M-l resize-pane -R 1

# Troca de janelas neural
bind Tab last-window
bind -r C-h select-window -t :- 
bind -r C-l select-window -t :+

# Acesso rápido neural
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5

# --- Modo de Cópia Neural ---
bind v copy-mode
bind p paste-buffer
bind C-p choose-buffer

bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind -T copy-mode-vi Escape send-keys -X cancel
bind -T copy-mode-vi H send-keys -X start-of-line
bind -T copy-mode-vi L send-keys -X end-of-line

# --- Gerenciamento de Sessão Neural ---
# Main neural session switcher (usa sesh se disponível)
bind-key "K" display-popup -E -w 90% -h 80% -x C -y C '\n  if command -v sesh >/dev/null 2>&1; then
    sesh connect "$(sesh list --icons | fzf \
      --ansi \
      --border=rounded \
      --border-label=\"  KORA Neural Session Matrix  \" \
      --prompt=\"󰣇 \" \
      --pointer=\"\" \
      --marker=\"󰄬\" \
      --color=\"fg:#c0c0ff,bg:#0d0d1a,hl:#A020F0\" \
      --color=\"fg+:#0d0d1a,bg+:#A020F0,hl+:#00FFFF\" \
      --color=\"border:#A020F0,header:#00FFFF,info:#00FF7F\" \
      --color=\"spinner:#FF00FF,pointer:#FF00FF,marker:#00FF7F\" \
      --header=\" Neural Interface │ Operator: Saiiru@$(hostname) │ $(date +\"%Y-%m-%d %H:%M:%S UTC\")\" \
      --preview=\"echo \" NEURAL SESSION ANALYSIS\" && echo \"▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔\" && sesh preview {} 2>/dev/null | head -15 || echo \" No neural data available\"\" \
      --preview-window=\"right:45%:wrap:rounded\" \
      --height=100% \
      --layout=reverse \
      --info=inline \
      --cycle \
    )"
  else
    tmux choose-session
  fi'

# Quick neural access
bind-key "s" display-popup -E -w 65% -h 60% -x C -y C '\n  if command -v sesh >/dev/null 2>&1; then
    sesh connect "$(sesh list | fzf \
      --prompt=\"󰣇 Quick: \" \
      --border=rounded \
      --border-label=\"  Neural Quick Access  \" \
      --color=\"fg:#c0c0ff,bg:#0d0d1a,border:#A020F0\" \
      --color=\"fg+:#0d0d1a,bg+:#A020F0\" \
    )"
  else
    tmux choose-session
  fi'

# Neural session creator
bind-key "N" display-popup -E -w 80% -h 70% -x C -y C '\n  clear
  echo "                      󰣇                      "
  echo "             KORA NEURAL MATRIX              "
  echo "          SESSION CREATION PROTOCOL          "
  echo "▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔"
  echo " NEURAL TEMPLATES:"
  echo "   󰿟 [p] Project Session    󰿟 [w] Work Session"
  echo "   󰿟 [d] Development        󰿟 [t] Temporary"
  echo "   󰿟 [c] Coding Session     󰿟 [m] Monitoring"
  echo "   󰿟 [r] Research           󰿟 [x] Experiment"
  echo
  echo " 📍 Current Location: $(pwd)"
  echo " 🕒 Neural Time: $(date +\"%H:%M:%S\")"
  echo " 👤 Operator: Saiiru"
  echo "▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔"
  echo
  read -p "󰣇 Neural session identifier: " input
  
  if [ -n "$input" ]; then
    case "$input" in
      p|project) name=\"project-$(basename $(pwd))\" ;; 
      w|work) name=\"work-$(date +%Y%m%d)\" ;; 
      d|dev) name=\"dev-$(basename $(pwd))\" ;; 
      t|tmp) name=\"tmp-$(date +%H%M)\" ;; 
      c|coding) name=\"coding-$(basename $(pwd))\" ;; 
      m|monitor) name=\"monitor-$(hostname)\" ;; 
      r|research) name=\"research-$(date +%m%d)\" ;; 
      x|experiment) name=\"exp-$(date +%H%M)\" ;; 
      *) name=\"$input\" ;; 
    esac
    
    echo "󰣇 Initializing neural session: $name"
    echo "🔄 Establishing neural links..."
    if command -v sesh >/dev/null 2>&1; then
      sesh connect "$name"
    else
      tmux new-session -d -s "$name" -c "$(pwd)" && tmux switch-client -t "$name"
    fi
  fi'

# Neural intelligence report
bind-key "i" display-popup -E -w 75% -h 75% -x C -y C '\n  clear
  echo "                      󰣇                      "
  echo "             KORA NEURAL MATRIX              "
  echo "           INTELLIGENCE REPORT               "
  echo "▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔"
  echo
  echo " SESSION NEURAL DATA:"
  echo "   󰒋 Active Session: $(tmux display-message -p \"#S\")"
  echo "   󰾸 Neural Windows: $(tmux list-windows | wc -l)"
  echo "   󰃞 Active Panes: $(tmux list-panes -s | wc -l)"
  echo "   󰿟 Total Sessions: $(tmux list-sessions | wc -l)"
  echo "   󰃭 Current Path: $(tmux display-message -p \"#{pane_current_path}\")"
  echo "   󰞁 Process: $(tmux display-message -p \"#{pane_current_command}\")"
  echo
  echo " SYSTEM NEURAL STATUS:"
  echo "   🕒 Neural Time: $(date +\"%Y-%m-%d %H:%M:%S UTC\")"
  echo "   ⚡ System Uptime: $(uptime | cut -d, -f1 | cut -d\" \" -f4-)"
  echo "   󰍛 Load Average: $(uptime | awk -F\"load average:\" \"{print \$2}\" | awk \"{print \$1}\" | sed \"s/,//\")"
  echo "   󰾆 Memory Usage: $(free -h 2>/dev/null | awk \"/^Mem:/ {print \$3\"/\"\$2}\" || echo \"N/A\")"
  echo "   󰋊 Storage: $(df -h / 2>/dev/null | tail -1 | awk \"{print \$3\"/\"\$2\" (\"\$5\")}\" || echo \"N/A\")"
  echo "   󰒋 Host: $(hostname)"
  echo "   👤 Operator: Saiiru"
  echo
  echo " NEURAL NETWORK STATUS:"
  echo "   󰣇 TMUX Version: $(tmux -V 2>/dev/null || echo \"Unknown\")"
  echo "   🐚 Shell: $(basename $SHELL)"
  echo "   🖥️ Terminal: $TERM"
  
  if command -v sesh >/dev/null 2>&1; then
    echo "   🧠 Sesh Neural Network: ✅ ONLINE ($(sesh list 2>/dev/null | wc -l) sessions)"
  else
    echo "   🧠 Sesh Neural Network: ❌ OFFLINE"
  fi
  
  echo "▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔"
  echo "󰣇 Neural analysis complete. Press [ENTER] to continue..."
  read 
'

# Last neural session
bind-key "L" run-shell 'sesh last 2>/dev/null || tmux switch-client -l 2>/dev/null || tmux display-message "󰣇 No previous neural session"'

# --- Aplicações Neurais ---
# Ferramentas neurais do sistema
bind F1 new-window -n "󰄄 neural-monitor" 'btop 2>/dev/null || htop 2>/dev/null || top'
bind F2 new-window -n "󰉓 neural-logs" 'journalctl -f 2>/dev/null || tail -f /var/log/system.log 2>/dev/null || echo "No neural logs available"'
bind F3 new-window -n "󰊢 neural-git" 'lazygit 2>/dev/null || echo "Install lazygit for enhanced neural git interface"'
bind F4 new-window -n "⚙️ neural-config" 'nvim ~/.tmux.conf'
bind F5 split-window -h -p 35 'while true; do clear; echo "                󰣇               "; echo "        KORA NEURAL MONITOR       "; echo "▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔"; echo "🕒 $(date +\"%H:%M:%S\")"; echo "⚡ Load: $(uptime | awk -F\"load average:\" \"{print \$2}\" | awk \"{print \$1}\" | sed \"s/,//\")"; echo "󰾆 Memory: $(free -h 2>/dev/null | awk \"/^Mem:/ {print \$3\"/\"\$2}\" || echo \"N/A\")"; echo "󰋊 Disk: $(df -h / 2>/dev/null | tail -1 | awk \"{print \$3\"/\"\$2\" (\"\$5\")}\" || echo \"N/A\")"; echo "󰍛 Processes: $(ps aux | wc -l)"; echo "▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔"; sleep 2; done'

# Ferramentas neurais de desenvolvimento
bind g new-window -c "#{pane_current_path}" -n "󰊢 neural-git" 'lazygit 2>/dev/null || echo "Install lazygit for enhanced neural git interface"'
bind e new-window -c "#{pane_current_path}" -n "󰕷 neural-editor" 'nvim .'
bind t new-window -c "#{pane_current_path}" -n "󰙨 neural-test" 'npm test 2>/dev/null || python -m pytest 2>/dev/null || cargo test 2>/dev/null || echo "No neural test protocols detected"'
bind b new-window -c "#{pane_current_path}" -n "󰆧 neural-build" 'npm run build 2>/dev/null || yarn build 2>/dev/null || make 2>/dev/null || cargo build 2>/dev/null || echo "No neural build matrix detected"'
bind d split-window -v -l 12 'npm run dev 2>/dev/null || yarn dev 2>/dev/null || python -m http.server 8000 2>/dev/null || echo "No neural dev server available"'

# Gerenciamento neural de arquivos
bind f new-window -c "#{pane_current_path}" -n "󰉋 neural-files" 'ranger 2>/dev/null || lf 2>/dev/null || ls -la --color=always'

# --- Produtividade Neural ---
# Recarregar config neural
bind r source-file ~/.tmux.conf \; display-message "󰣇 KORA neural matrix reloaded"

# Alternar status neural
bind B if -F '#{s/off//:status}' 'set status off; display-message "󰣇 Neural HUD: HIDDEN"' 'set status on; display-message "󰣇 Neural HUD: VISIBLE"'

# Sincronização neural
bind Y setw synchronize-panes \; display-message "#{?synchronize-panes,🔗 Neural Sync: ACTIVE,🔗 Neural Sync: INACTIVE}"

# Operações de renomeação neural
bind R command-prompt -I "#{window_name}" "rename-window '%%'"
bind '$' command-prompt -I "#{session_name}" "rename-session '%%'"

# Terminação neural
bind x confirm-before -p "Terminate neural pane #P? (y/n)" kill-pane
bind X confirm-before -p "Terminate neural window #W? (y/n)" kill-window

# Limpar neural
bind C-l send-keys 'C-l' \; clear-history

# --- Plugins Neurais ---
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-yank'

# Configurações de plugins neurais
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-nvim 'session'
set -g @continuum-restore 'on'
set -g @continuum-save-interval '15'
set -g @yank_with_mouse on

# --- Integração Terminal Neural ---
# Kitty neural integration
if-shell 'test -n "$KITTY_WINDOW_ID"' {
  bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "kitty +kitten clipboard"
}

# Outras integrações de clipboard neural
if-shell 'command -v pbcopy' {
  bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
}

if-shell 'command -v xclip' {
  bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -selection clipboard"
}

if-shell 'command -v wl-copy' {
  bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "wl-copy"
}

# --- Inicialização da Matriz Neural ---
# Inicializa plugins TPM neurais
run '~/.tmux/plugins/tpm/tpm'

# Notificação de matriz neural online
display-message "󰣇 KORA Neural Matrix V4.4 Online - All systems operational"
